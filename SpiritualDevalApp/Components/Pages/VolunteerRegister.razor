@page "/volunteer/register/{eventId:int}"
@using Microsoft.EntityFrameworkCore
@using SpiritualDevalApp.Data
@using SpiritualDevalApp.Models.Entities
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer
<PageTitle>Volunteer Registration</PageTitle>

<h1>Volunteer for Event</h1>
<p>Event ID: @EventId</p>

<div>
    <label for="skillsProvided">Skills Provided (optional):</label>
    <textarea id="skillsProvided" @bind="SkillsProvided" class="form-control" rows="3"></textarea>
</div>

<button class="btn btn-primary" @onclick="RegisterAsVolunteer">Register as Volunteer</button>

<p>@Message</p>

@code {
    [Parameter]
    public int EventId { get; set; }

    private string SkillsProvided { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;

    private async Task RegisterAsVolunteer()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var username = user.Identity.Name;

            if (!string.IsNullOrEmpty(username))
            {
                var loggedInUser = await DbContext.UserAccounts
                    .FirstOrDefaultAsync(u => u.UserName == username);

                if (loggedInUser != null)
                {
                    var userId = loggedInUser.Id;

                    // Fetch event details
                    var eventDetails = await DbContext.Events.FindAsync(EventId);
                    if (eventDetails == null)
                    {
                        Message = "Event not found.";
                        return;
                    }

                    // Check current volunteer count
                    var currentVolunteers = await DbContext.VolunteerRegistrations
                        .CountAsync(v => v.EventId == EventId);

                    if (currentVolunteers >= eventDetails.VolunteersRequired)
                    {
                        Message = "Volunteer limit reached for this event.";
                        return;
                    }

                    // Register the user as a volunteer
                    var volunteerRegistration = new VolunteerRegistration
                    {
                        UserId = userId,
                        EventId = EventId,
                        RegistrationDate = DateTime.UtcNow,
                        SkillsProvided = SkillsProvided
                    };

                    DbContext.VolunteerRegistrations.Add(volunteerRegistration);
                    await DbContext.SaveChangesAsync();

                    Message = $"Successfully registered as a volunteer for event {EventId}! (User ID: {userId})";
                }
                else
                {
                    Message = "User account not found in the database.";
                }
            }
            else
            {
                Message = "Username is missing from authentication state.";
            }
        }
        else
        {
            Message = "You must be logged in to register as a volunteer.";
        }
    }
}