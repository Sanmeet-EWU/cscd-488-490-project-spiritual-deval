@page "/volunteer/register/{eventId:int}"
@using Microsoft.EntityFrameworkCore
@using SpiritualDevalApp.Data
@using SpiritualDevalApp.Models.Entities
@inject AppDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

<PageTitle>Volunteer Registration</PageTitle>

<h1>Volunteer for Event</h1>

@if (EventDetails != null)
{
    <div class="card">
        <div class="card-body">
            <h2>@EventDetails.EventTitle</h2>
            <p><strong>Description:</strong> @EventDetails.EventDescription</p>
            <p><strong>Date:</strong> @EventDetails.EventDate.ToString("f")</p>
            <p><strong>Location:</strong> @EventDetails.EventLocation</p>
            <p><strong>Volunteers Needed:</strong> @CurrentVolunteers / @EventDetails.VolunteersRequired</p>
            <p><strong>Skills Required:</strong> @EventDetails.SkillsRequired</p>

            @if (CurrentVolunteers < EventDetails.VolunteersRequired)
            {
                <div>
                    <label for="skillsProvided"><strong>Skills Provided (optional):</strong></label>
                    <textarea id="skillsProvided" @bind="SkillsProvided" class="form-control" rows="3"></textarea>
                </div>
                <button class="btn btn-primary mt-2" @onclick="RegisterAsVolunteer">Register as Volunteer</button>
            }
            else
            {
                <p class="text-danger">Volunteer limit reached for this event.</p>
            }

            <!-- Subscription Button -->
            <button class="btn @(IsSubscribed ? "btn-danger" : "btn-primary") mt-2" @onclick="ToggleSubscription">
                @(IsSubscribed ? "Unsubscribe from Updates" : "Subscribe for Updates")
            </button>
        </div>
    </div>
}
else
{
    <p>Loading event details...</p>
}

<p>@Message</p>

@code {
    [Parameter] public int EventId { get; set; }
    private Event? EventDetails { get; set; }
    private int CurrentVolunteers { get; set; }
    private string SkillsProvided { get; set; } = string.Empty;
    private string Message { get; set; } = string.Empty;
    private bool IsSubscribed { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventDetails();
        await CheckSubscriptionStatus();
    }

    private async Task LoadEventDetails()
    {
        EventDetails = await DbContext.Events.FindAsync(EventId);

        if (EventDetails != null)
        {
            CurrentVolunteers = await DbContext.VolunteerRegistrations
                .CountAsync(v => v.EventId == EventId);
        }
    }

    private async Task CheckSubscriptionStatus()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var username = user.Identity.Name;
            if (!string.IsNullOrEmpty(username))
            {
                var loggedInUser = await DbContext.UserAccounts
                    .FirstOrDefaultAsync(u => u.UserName == username);

                if (loggedInUser != null)
                {
                    IsSubscribed = loggedInUser.SubscribedToVolunteerUpdates;
                }
            }
        }
    }

    private async Task ToggleSubscription()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var username = user.Identity.Name;
            if (!string.IsNullOrEmpty(username))
            {
                var loggedInUser = await DbContext.UserAccounts
                    .FirstOrDefaultAsync(u => u.UserName == username);

                if (loggedInUser != null)
                {
                    loggedInUser.SubscribedToVolunteerUpdates = !loggedInUser.SubscribedToVolunteerUpdates;
                    await DbContext.SaveChangesAsync();
                    IsSubscribed = loggedInUser.SubscribedToVolunteerUpdates;
                }
            }
        }
    }

    private async Task RegisterAsVolunteer()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var username = user.Identity.Name;

            if (!string.IsNullOrEmpty(username))
            {
                var loggedInUser = await DbContext.UserAccounts
                    .FirstOrDefaultAsync(u => u.UserName == username);

                if (loggedInUser != null)
                {
                    var userId = loggedInUser.Id;

                    if (EventDetails == null)
                    {
                        Message = "Event not found.";
                        return;
                    }

                    var existingVolunteer = await DbContext.VolunteerRegistrations
                        .AnyAsync(v => v.EventId == EventId && v.UserId == userId);

                    if (existingVolunteer)
                    {
                        Message = "You are already registered as a volunteer for this event.";
                        return;
                    }

                    if (CurrentVolunteers >= EventDetails.VolunteersRequired)
                    {
                        Message = "Volunteer limit reached for this event.";
                        return;
                    }

                    var volunteerRegistration = new VolunteerRegistration
                    {
                        UserId = userId,
                        EventId = EventId,
                        RegistrationDate = DateTime.UtcNow,
                        SkillsProvided = SkillsProvided
                    };

                    DbContext.VolunteerRegistrations.Add(volunteerRegistration);
                    await DbContext.SaveChangesAsync();

                    Message = $"Successfully registered as a volunteer for {EventDetails.EventTitle}!";
                    
                    // Refresh volunteer count
                    CurrentVolunteers++;
                }
                else
                {
                    Message = "User account not found in the database.";
                }
            }
            else
            {
                Message = "Username is missing from authentication state.";
            }
        }
        else
        {
            Message = "You must be logged in to register as a volunteer.";
        }
    }
}