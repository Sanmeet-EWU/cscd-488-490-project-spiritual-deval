@page "/admin"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using SpiritualDevalApp.Data
@using SpiritualDevalApp.Models.Entities
@inject AppDbContext DbContext
@attribute [Authorize(Roles = "Administrator")]

@code {
    private IEnumerable<Event>? UpcomingEvents;
    private IEnumerable<Event>? PastEvents;
    private Dictionary<int, List<UserAccount>> RegisteredUsersByEvent = new();
    private Dictionary<int, List<UserAccount>> VolunteersByEvent = new();

    protected override async Task OnInitializedAsync()
    {
        var currentDate = DateTime.Now;
        UpcomingEvents = await DbContext.Events
            .Where(e => e.EventDate >= currentDate)
            .OrderBy(e => e.EventDate)
            .ToListAsync();

        PastEvents = await DbContext.Events
            .Where(e => e.EventDate < currentDate)
            .OrderByDescending(e => e.EventDate)
            .ToListAsync();

        await LoadRegisteredUsers();
        await LoadVolunteers();
    }

    private async Task LoadRegisteredUsers()
    {
        var registrations = await DbContext.EventRegistrations
            .Include(er => er.User)
            .ToListAsync();

        RegisteredUsersByEvent = registrations
            .GroupBy(er => er.EventId)
            .ToDictionary(g => g.Key, g => g.Select(er => er.User).ToList());
    }

    private async Task LoadVolunteers()
    {
        var volunteers = await DbContext.VolunteerRegistrations
            .Include(vr => vr.User)
            .ToListAsync();

        VolunteersByEvent = volunteers
            .GroupBy(vr => vr.EventId)
            .ToDictionary(g => g.Key, g => g.Select(vr => vr.User).ToList());
    }
}

<h1>Event Management</h1>

<div style="text-align: center;">
    <button class="btn" onclick="location.href='/admin/event/create'">Create Event</button>
    <button class="btn" onclick="location.href='/admin/mail'">Send Update</button>
</div>

<section class="Events">
    <h2>Upcoming Events</h2>
    @if (UpcomingEvents != null && UpcomingEvents.Any())
    {
        <ul>
            @foreach (var eventItem in UpcomingEvents)
            {
                <li>
                    <h3>@eventItem.EventTitle</h3>
                    <h4>Registered</h4>
                    @if (RegisteredUsersByEvent.TryGetValue(eventItem.EventId, out var users) && users.Any())
                    {
                        <ul>
                            @foreach (var user in users)
                            {
                                <li>@user.FirstName @user.LastName</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No registrations.</p>
                    }

                    <h4>Volunteers</h4>
                    @if (VolunteersByEvent.TryGetValue(eventItem.EventId, out var volunteers) && volunteers.Any())
                    {
                        <ul>
                            @foreach (var user in volunteers)
                            {
                                <li>@user.FirstName @user.LastName</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No volunteers.</p>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>No upcoming events.</p>
    }
</section>

<section class="Events">
    <h2>Past Events</h2>
    @if (PastEvents != null && PastEvents.Any())
    {
        <ul>
            @foreach (var eventItem in PastEvents)
            {
                <li>
                    <h3>@eventItem.EventTitle</h3>
                    <h4>Registered</h4>
                    @if (RegisteredUsersByEvent.TryGetValue(eventItem.EventId, out var users) && users.Any())
                    {
                        <ul>
                            @foreach (var user in users)
                            {
                                <li>@user.FirstName @user.LastName</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No registrations.</p>
                    }

                    <h4>Volunteers</h4>
                    @if (VolunteersByEvent.TryGetValue(eventItem.EventId, out var volunteers) && volunteers.Any())
                    {
                        <ul>
                            @foreach (var user in volunteers)
                            {
                                <li>@user.FirstName @user.LastName</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>No volunteers.</p>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>No past events.</p>
    }
</section>
