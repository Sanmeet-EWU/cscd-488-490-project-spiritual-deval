@page "/admin/mail"
@using System.Net.Mail
@using System.Net
@using Microsoft.EntityFrameworkCore
@using SpiritualDevalApp.Data
@using SpiritualDevalApp.Models.Entities
@inject AppDbContext DbContext
@layout MainLayout
@rendermode InteractiveServer

<PageTitle>Send Mail</PageTitle>

<h2>Send Mail</h2>

<div>
    <label>Email Title:</label>
    <input type="text" @bind="EmailTitle" class="form-control" />
</div>
<div>
    <label>Email Body:</label>
    <textarea @bind="EmailBody" class="form-control"></textarea>
</div>

<button type="button" class="btn btn-primary mt-2" @onclick="SendMail">Send Mail</button>

<span style="font-weight:bold;">@Message</span>

@code {
    private string EmailTitle { get; set; } = "";
    private string EmailBody { get; set; } = "";
    private string Message { get; set; } = "";

    private async Task SendMail()
    {
        try
        {
            // Fetch all users who are subscribed
            var subscribedUsers = await DbContext.UserAccounts
                .Where(u => u.SubscribedToVolunteerUpdates && !string.IsNullOrEmpty(u.Email))
                .ToListAsync();

            if (subscribedUsers.Count == 0)
            {
                Message = "No subscribed users to send emails to.";
                return;
            }

            using (SmtpClient smtp = new SmtpClient("smtp.gmail.com", 587))
            {
                smtp.Credentials = new NetworkCredential("spiritualdeval@gmail.com", "ixqieyynjgnnlxyn");
                smtp.EnableSsl = true;

                foreach (var user in subscribedUsers)
                {
                    using (MailMessage mail = new MailMessage())
                    {
                        mail.From = new MailAddress("spiritualdeval@gmail.com");
                        mail.To.Add(user.Email);
                        mail.Subject = EmailTitle;
                        mail.Body = EmailBody;
                        mail.IsBodyHtml = false;

                        await smtp.SendMailAsync(mail);
                    }
                }
            }

            Message = $"Mail Sent to {subscribedUsers.Count} users.";
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
    }
}