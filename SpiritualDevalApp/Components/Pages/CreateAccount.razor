
@page "/CreateAccount"
@layout MainLayout
@rendermode InteractiveServer
<PageTitle>Create Account</PageTitle>
<h2>Enter your details</h2>
<div class="create-account-container">
    <div class="create-account-box">
        <EditForm Model="user" OnValidSubmit="HandleValidSubmit">
            <div class="form-group">
                <label for="emailInput">Email:</label>
                <InputText id="emailInput" @bind-Value="user.Email" class="form-control" />
            </div>
            <div class="form-group">
                <label for="passwordInput">Password:</label>
                <InputText id="passwordInput" @bind-Value="user.Password" class="form-control" type="password" />
            </div>
            <div class="form-group">
                <label for="phoneInput">Phone:</label>
                <InputText id="phoneInput" @bind-Value="user.Phone" class="form-control" />
            </div>
            <div class="form-group">
                <label for="addressInput">Address:</label>
                <InputText id="addressInput" @bind-Value="user.Address" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>
@if (!string.IsNullOrEmpty(user.Email))
{
    <p>Your email: @user.Email</p>
}
@if (!string.IsNullOrEmpty(user.Password))
{
    <p>Your password: @user.Password</p>
}
@if (!string.IsNullOrEmpty(user.Phone))
{
    <p>Your phone: @user.Phone</p>
}
@if (!string.IsNullOrEmpty(user.Address))
{
    <p>Your address: @user.Address</p>
}
@code {
    private User user = new User();
    private async Task HandleValidSubmit()
    {
        await DbContext.Users.AddAsync(user);
        await DbContext.SaveChangesAsync();
        Console.WriteLine($"Saved: {user.Email}, {user.Password}, {user.Phone}, {user.Address}");
    }
    [Inject]
    private AppDbContext DbContext { get; set; }
}
